id$gene <- sapply(strsplit(as.character(id$gene), "\\."), `[`, 1)
for(i in 1:nrow(id)){
for(j in 1:nrow(ref)){
if(id$gene[i] == ref$V3[j]){
id$gene_uni[i] = ref$V1[j]
break
}
}
}
ref <- read.delim(input_file_ref_to, header=FALSE)
ref$V1 <- as.character(ref$V1)
ref$V3 <- as.character(ref$V3)
id$gene_uni <- as.character(id$gene_uni)
#id$V3 <- as.character(id$V3)
for(i in 1:nrow(id)){
for(j in 1:nrow(ref)){
if(id$gene_uni[i] == ref$V1[j]){
id$gene_name[i] = ref$V3[j]
break
}
}
}
View(id)
genes <- read.delim("/home/workstation/Documents/Sarthak/gender_prognosis/analysis/GBM_enrich.txt" header=FALSE)
genes <- read.delim("/home/workstation/Documents/Sarthak/gender_prognosis/analysis/GBM_enrich.txt", header=FALSE)
View(genes)
genes <- unique(genes$V1)
genes <- read.delim("/home/workstation/Documents/Sarthak/gender_prognosis/analysis/GBM_enrich.txt", header=FALSE)
genes <- as.character(unique(genes$V1))
rm(list = setdiff(genes,ls()))
rm
rm()
?rm()
setdiff(genes,ls()))
setdiff(genes,ls())
setdiff("genes",ls())
ls()
setdiff("genes",ls())
ls()
setdiff("genes",ls())
?setdiff
setdiff(ls(),"genes")
rm(list = setdiff(ls(),"genes"))
args = "GBM"
load("/home/workstation/Documents/Sarthak/gender_prognosis/Rcodes/idmap_fun.RData")
library(plyr)
library(dplyr)
library(readr)
library(stringr)
library('survival')
library('survminer')
library('grid')
library('gridExtra')
library(data.table)
#### Input & Output file names ####
tumor_file = str_c("/home/workstation/Documents/Sarthak/gender_prognosis/Tumor/",args[1],".tab")
clinical_file <- str_c("/home/workstation/Documents/Sarthak/gender_prognosis/Clinical/processed/",args[1],"_pro.tab")
dir <- "/home/workstation/Documents/Sarthak/gender_prognosis/plots/20210220_KM/"
#####################
##Initialising Tumor Dataset ##
tum <- read.table(file = tumor_file,  sep = '\t', header = TRUE)
length_dim <- nrow(tum)
width_dim <- ncol(tum)
median_tum <- vector()
for (i in 1:length_dim)#Till the last gene entry
{
median_tum[i] <- median(as.matrix(tum[i,]))#loop is run only till the last patient entry
#if the covariates are not mentioned the loop is not functional after the 1st iteration
if(i%%5000==0){
print(i)
}
}
tum$median <- median_tum
tum <- subset(tum, tum$median >1)#filtering the ones with more than 1FPKM
tum$median = NULL
median_tum <- NULL
t_row <- rownames(tum)
t_col <- colnames(tum)
tum <- transpose(tum)
rownames(tum) <- t_col
colnames(tum) <- t_row
#tum <- as.data.frame(tum)
tum$ID <- rownames(tum)
tum$ID <- sub(".*(\\d+{4}).*$", "\\1", tum$ID)
#####initialising Sample Dataset#####
sample <- fread(clinical_file)
sample <- unique.data.frame(sample)
sample$ID <- sapply(strsplit(sample$submitter_id,split = "-"), "[",3)
sample$gender <- as.character(sample$gender)
sample[sample$gender=="female",]$gender <- "1"
sample[sample$gender=="male",]$gender <- "0"
sample$gender <- as.numeric(sample$gender)
sample <- sample[!is.na(sample$gender),]
##### Data Merging #####
data <- merge(sample, tum, by="ID", all = F)
data <- data.frame(data)
male_sub <- data[data$gender==0,]
female_sub <- data[data$gender==1,]
for(plot_i in 1:length(genes)){
list_genes <- genes[plot_i]
print(list_genes)
# ############### Plot variables change genes #########
# j = grep(list_genes[1],colnames(data))
#
# male_sub[,j][male_sub[,j]< median(male_sub[,j])] <- 0
# male_sub[,j][male_sub[,j]>= median(male_sub[,j])] <- 1
# female_sub[,j][female_sub[,j]< median(female_sub[,j])] <- 0
# female_sub[,j][female_sub[,j]>= median(female_sub[,j])] <- 1
#
# fit_m <- survfit( Surv(time = PFI.time,
#                        event = PFI)~ male_sub[,j],
#                   data = male_sub)
# fit_f <- survfit( Surv(time = PFI.time,
#                        event = PFI)~ female_sub[,j],
#                   data = female_sub)
# tit_male <- str_c(args[1],"_Male_", idmap(colnames(male_sub)[j]))
# tit_female <- str_c(args[1],"_Female_", idmap(colnames(female_sub)[j]))
# tit_plot <- str_c(dir, args[1], colnames(data)[j],".png")
# p1m <- ggsurvplot(fit_m, data=male_sub,palette = c("#404040", "#ca0020"),
#                   ggtheme = theme_bw(),pval = TRUE,
#                   pval.method=TRUE,conf.int = FALSE,
#                   font.main=c(20,"bold"),font.x=c(16,"bold"),font.y=c(16,"bold"),
#                   font.tickslab=c(14,"plain"), title = tit_male, legend.labs = c("Low", "High"))
# p1f <- ggsurvplot(fit_f, data=female_sub,palette = c("#404040", "#ca0020"),
#                   ggtheme = theme_bw(),pval = TRUE,
#                   pval.method=TRUE,conf.int = FALSE,
#                   font.main=c(20,"bold"),font.x=c(16,"bold"),font.y=c(16,"bold"),
#                   font.tickslab=c(14,"plain"), title = tit_female, legend.labs = c("Low", "High"))
#
# splots <- list()
# splots[[1]] <- p1m
# splots[[2]] <- p1f
# p1 <- arrange_ggsurvplots(splots, print = FALSE,
#                           ncol = 2, nrow = 1, title = str_c(args,"_",colnames(data)[j]))
# png(tit_plot, width=800, height=400)
# print(p1)
# dev.off()
}
for(plot_i in 1:length(genes)){
list_genes <- genes[plot_i]
print(list_genes)
############### Plot variables change genes #########
j = grep(list_genes[1],colnames(data))
male_sub[,j][male_sub[,j]< median(male_sub[,j])] <- 0
male_sub[,j][male_sub[,j]>= median(male_sub[,j])] <- 1
female_sub[,j][female_sub[,j]< median(female_sub[,j])] <- 0
female_sub[,j][female_sub[,j]>= median(female_sub[,j])] <- 1
fit_m <- survfit( Surv(time = PFI.time,
event = PFI)~ male_sub[,j],
data = male_sub)
fit_f <- survfit( Surv(time = PFI.time,
event = PFI)~ female_sub[,j],
data = female_sub)
tit_male <- str_c(args[1],"_Male_", idmap(colnames(male_sub)[j]))
tit_female <- str_c(args[1],"_Female_", idmap(colnames(female_sub)[j]))
tit_plot <- str_c(dir, args[1], colnames(data)[j],".png")
p1m <- ggsurvplot(fit_m, data=male_sub,palette = c("#404040", "#ca0020"),
ggtheme = theme_bw(),pval = TRUE,
pval.method=TRUE,conf.int = FALSE,
font.main=c(20,"bold"),font.x=c(16,"bold"),font.y=c(16,"bold"),
font.tickslab=c(14,"plain"), title = tit_male, legend.labs = c("Low", "High"))
p1f <- ggsurvplot(fit_f, data=female_sub,palette = c("#404040", "#ca0020"),
ggtheme = theme_bw(),pval = TRUE,
pval.method=TRUE,conf.int = FALSE,
font.main=c(20,"bold"),font.x=c(16,"bold"),font.y=c(16,"bold"),
font.tickslab=c(14,"plain"), title = tit_female, legend.labs = c("Low", "High"))
splots <- list()
splots[[1]] <- p1m
splots[[2]] <- p1f
p1 <- arrange_ggsurvplots(splots, print = FALSE,
ncol = 2, nrow = 1, title = str_c(args,"_",colnames(data)[j]))
png(tit_plot, width=800, height=400)
print(p1)
dev.off()
}
str(male_sub)
list_genes <- genes[plot_i]
############### Plot variables change genes #########
j = grep(list_genes[1],colnames(data))
#ID mapping: Specific from taking input from .int file
####
input_file_ref_from <- "/home/workstation/Documents/Sarthak/gender_prognosis/IDMapping/idmap_ensembl.tab"
input_file_ref_to <- "/home/workstation/Documents/Sarthak/gender_prognosis/IDMapping/idmap_Gene_Name.tab"
#id_file <- "/home/workstation/Documents/Sarthak/gender_prognosis/analysis_FDR/intfile2/GBM_int.tab2"
#output_dir <- "/home/workstation/Documents/Sarthak/gender_prognosis/analysis/go/"
dir_path <- "/home/workstation/Documents/Sarthak/gender_prognosis/cox_regression/FDR_gender_zscore/"
###
library(stringr)
setwd(dir_path)
dir <- list.files(dir_path, pattern= "_FDR_int.tab", all.files=FALSE,  full.names=FALSE)
ref <- read.delim(input_file_ref_from, header=FALSE)
id_file = "GBM_FDR_int.tab"
id <- read.table(id_file, quote="\"", comment.char="", header = TRUE,stringsAsFactors = F)
id <- subset(id, select = c('gene'))
ref$V1 <- as.character(ref$V1)
ref$V3 <- as.character(ref$V3)
id$gene <- as.character(id$gene)
id$gene <- sapply(strsplit(as.character(id$gene), "\\."), `[`, 1)
for(i in 1:nrow(id)){
for(j in 1:nrow(ref)){
if(id$gene[i] == ref$V3[j]){
id$gene_uni[i] = ref$V1[j]
break
}
}
}
ref <- read.delim(input_file_ref_to, header=FALSE)
ref$V1 <- as.character(ref$V1)
ref$V3 <- as.character(ref$V3)
id$gene_uni <- as.character(id$gene_uni)
#id$V3 <- as.character(id$V3)
for(i in 1:nrow(id)){
for(j in 1:nrow(ref)){
if(id$gene_uni[i] == ref$V1[j]){
id$gene_name[i] = ref$V3[j]
break
}
}
}
genes <- read.delim("/home/workstation/Documents/Sarthak/gender_prognosis/analysis/GBM_enrich.txt", header=FALSE)
genes <- as.character(unique(genes$V1))
View(id)
id <- id[id$gene %in% genes]
#ID mapping: Specific from taking input from .int file
####
input_file_ref_from <- "/home/workstation/Documents/Sarthak/gender_prognosis/IDMapping/idmap_ensembl.tab"
input_file_ref_to <- "/home/workstation/Documents/Sarthak/gender_prognosis/IDMapping/idmap_Gene_Name.tab"
#id_file <- "/home/workstation/Documents/Sarthak/gender_prognosis/analysis_FDR/intfile2/GBM_int.tab2"
#output_dir <- "/home/workstation/Documents/Sarthak/gender_prognosis/analysis/go/"
dir_path <- "/home/workstation/Documents/Sarthak/gender_prognosis/cox_regression/FDR_gender_zscore/"
###
library(stringr)
setwd(dir_path)
dir <- list.files(dir_path, pattern= "_FDR_int.tab", all.files=FALSE,  full.names=FALSE)
ref <- read.delim(input_file_ref_from, header=FALSE)
id_file = "GBM_FDR_int.tab"
id <- read.table(id_file, quote="\"", comment.char="", header = TRUE,stringsAsFactors = F)
id <- subset(id, select = c('gene'))
ref$V1 <- as.character(ref$V1)
ref$V3 <- as.character(ref$V3)
id$gene <- as.character(id$gene)
id$gene <- sapply(strsplit(as.character(id$gene), "\\."), `[`, 1)
for(i in 1:nrow(id)){
for(j in 1:nrow(ref)){
if(id$gene[i] == ref$V3[j]){
id$gene_uni[i] = ref$V1[j]
break
}
}
}
ref <- read.delim(input_file_ref_to, header=FALSE)
ref$V1 <- as.character(ref$V1)
ref$V3 <- as.character(ref$V3)
id$gene_uni <- as.character(id$gene_uni)
#id$V3 <- as.character(id$V3)
for(i in 1:nrow(id)){
for(j in 1:nrow(ref)){
if(id$gene_uni[i] == ref$V1[j]){
id$gene_name[i] = ref$V3[j]
break
}
}
}
genes <- read.delim("/home/workstation/Documents/Sarthak/gender_prognosis/analysis/GBM_enrich.txt", header=FALSE)
genes <- as.character(unique(genes$V1))
View(id)
id <- id[id$gene_name %in% genes]
id <- id[id$gene_name %in% genes,]
genes <- id$gene
rm(list = setdiff(ls(),"genes"))
list_genes <- genes[plot_i]
plot_i =1
list_genes <- genes[plot_i]
print(list_genes)
############### Plot variables change genes #########
j = grep(list_genes[1],colnames(data))
grep(list_genes[1],colnames(data))
rm(list = setdiff(ls(),"genes"))
args <- "GBM"
load("/home/workstation/Documents/Sarthak/gender_prognosis/Rcodes/idmap_fun.RData")
library(plyr)
library(dplyr)
library(readr)
library(stringr)
library('survival')
library('survminer')
library('grid')
library('gridExtra')
library(data.table)
#### Input & Output file names ####
tumor_file = str_c("/home/workstation/Documents/Sarthak/gender_prognosis/Tumor/",args[1],".tab")
clinical_file <- str_c("/home/workstation/Documents/Sarthak/gender_prognosis/Clinical/processed/",args[1],"_pro.tab")
dir <- "/home/workstation/Documents/Sarthak/gender_prognosis/plots/20210220_KM/"
#####################
##Initialising Tumor Dataset ##
tum <- read.table(file = tumor_file,  sep = '\t', header = TRUE)
length_dim <- nrow(tum)
width_dim <- ncol(tum)
median_tum <- vector()
for (i in 1:length_dim)#Till the last gene entry
{
median_tum[i] <- median(as.matrix(tum[i,]))#loop is run only till the last patient entry
#if the covariates are not mentioned the loop is not functional after the 1st iteration
if(i%%5000==0){
print(i)
}
}
tum$median <- median_tum
tum <- subset(tum, tum$median >1)#filtering the ones with more than 1FPKM
tum$median = NULL
median_tum <- NULL
t_row <- rownames(tum)
t_col <- colnames(tum)
tum <- transpose(tum)
rownames(tum) <- t_col
colnames(tum) <- t_row
#tum <- as.data.frame(tum)
tum$ID <- rownames(tum)
tum$ID <- sub(".*(\\d+{4}).*$", "\\1", tum$ID)
#####initialising Sample Dataset#####
sample <- fread(clinical_file)
sample <- unique.data.frame(sample)
sample$ID <- sapply(strsplit(sample$submitter_id,split = "-"), "[",3)
sample$gender <- as.character(sample$gender)
sample[sample$gender=="female",]$gender <- "1"
sample[sample$gender=="male",]$gender <- "0"
sample$gender <- as.numeric(sample$gender)
sample <- sample[!is.na(sample$gender),]
##### Data Merging #####
data <- merge(sample, tum, by="ID", all = F)
data <- data.frame(data)
male_sub <- data[data$gender==0,]
female_sub <- data[data$gender==1,]
plot_i <- 1
list_genes <- genes[plot_i]
print(list_genes)
grep(list_genes[1],colnames(data))
for(plot_i in 1:length(genes)){
list_genes <- genes[plot_i]
print(list_genes)
############### Plot variables change genes #########
j = grep(list_genes[1],colnames(data))
male_sub[,j][male_sub[,j]< median(male_sub[,j])] <- 0
male_sub[,j][male_sub[,j]>= median(male_sub[,j])] <- 1
female_sub[,j][female_sub[,j]< median(female_sub[,j])] <- 0
female_sub[,j][female_sub[,j]>= median(female_sub[,j])] <- 1
fit_m <- survfit( Surv(time = PFI.time,
event = PFI)~ male_sub[,j],
data = male_sub)
fit_f <- survfit( Surv(time = PFI.time,
event = PFI)~ female_sub[,j],
data = female_sub)
tit_male <- str_c(args[1],"_Male_", idmap(colnames(male_sub)[j]))
tit_female <- str_c(args[1],"_Female_", idmap(colnames(female_sub)[j]))
tit_plot <- str_c(dir, args[1], colnames(data)[j],".png")
p1m <- ggsurvplot(fit_m, data=male_sub,palette = c("#404040", "#ca0020"),
ggtheme = theme_bw(),pval = TRUE,
pval.method=TRUE,conf.int = FALSE,
font.main=c(20,"bold"),font.x=c(16,"bold"),font.y=c(16,"bold"),
font.tickslab=c(14,"plain"), title = tit_male, legend.labs = c("Low", "High"))
p1f <- ggsurvplot(fit_f, data=female_sub,palette = c("#404040", "#ca0020"),
ggtheme = theme_bw(),pval = TRUE,
pval.method=TRUE,conf.int = FALSE,
font.main=c(20,"bold"),font.x=c(16,"bold"),font.y=c(16,"bold"),
font.tickslab=c(14,"plain"), title = tit_female, legend.labs = c("Low", "High"))
splots <- list()
splots[[1]] <- p1m
splots[[2]] <- p1f
p1 <- arrange_ggsurvplots(splots, print = FALSE,
ncol = 2, nrow = 1, title = str_c(args,"_",colnames(data)[j]))
png(tit_plot, width=800, height=400)
print(p1)
dev.off()
}
#ID mapping: Specific from taking input from .int file
####
input_file_ref_from <- "/home/workstation/Documents/Sarthak/gender_prognosis/IDMapping/idmap_ensembl.tab"
input_file_ref_to <- "/home/workstation/Documents/Sarthak/gender_prognosis/IDMapping/idmap_Gene_Name.tab"
#id_file <- "/home/workstation/Documents/Sarthak/gender_prognosis/analysis_FDR/intfile2/GBM_int.tab2"
#output_dir <- "/home/workstation/Documents/Sarthak/gender_prognosis/analysis/go/"
dir_path <- "/home/workstation/Documents/Sarthak/gender_prognosis/cox_regression/FDR_gender_zscore/"
###
library(stringr)
setwd(dir_path)
dir <- list.files(dir_path, pattern= "_FDR_int.tab", all.files=FALSE,  full.names=FALSE)
ref <- read.delim(input_file_ref_from, header=FALSE)
id_file = "HNSC_FDR_int.tab"
id <- read.table(id_file, quote="\"", comment.char="", header = TRUE,stringsAsFactors = F)
id <- subset(id, select = c('gene'))
ref$V1 <- as.character(ref$V1)
ref$V3 <- as.character(ref$V3)
id$gene <- as.character(id$gene)
id$gene <- sapply(strsplit(as.character(id$gene), "\\."), `[`, 1)
for(i in 1:nrow(id)){
for(j in 1:nrow(ref)){
if(id$gene[i] == ref$V3[j]){
id$gene_uni[i] = ref$V1[j]
break
}
}
}
ref <- read.delim(input_file_ref_to, header=FALSE)
ref$V1 <- as.character(ref$V1)
ref$V3 <- as.character(ref$V3)
id$gene_uni <- as.character(id$gene_uni)
#id$V3 <- as.character(id$V3)
for(i in 1:nrow(id)){
for(j in 1:nrow(ref)){
if(id$gene_uni[i] == ref$V1[j]){
id$gene_name[i] = ref$V3[j]
break
}
}
}
genes <- read.delim("/home/workstation/Documents/Sarthak/gender_prognosis/analysis/HNSC_enrich.txt", header=FALSE)
genes <- as.character(unique(genes$V1))
id <- id[id$gene_name %in% genes,]
genes <- id$gene
rm(list = setdiff(ls(),"genes"))
args <- "HNSC"
load("/home/workstation/Documents/Sarthak/gender_prognosis/Rcodes/idmap_fun.RData")
library(plyr)
library(dplyr)
library(readr)
library(stringr)
library('survival')
library('survminer')
library('grid')
library('gridExtra')
library(data.table)
#### Input & Output file names ####
tumor_file = str_c("/home/workstation/Documents/Sarthak/gender_prognosis/Tumor/",args[1],".tab")
clinical_file <- str_c("/home/workstation/Documents/Sarthak/gender_prognosis/Clinical/processed/",args[1],"_pro.tab")
dir <- "/home/workstation/Documents/Sarthak/gender_prognosis/plots/20210220_KM/"
#####################
##Initialising Tumor Dataset ##
tum <- read.table(file = tumor_file,  sep = '\t', header = TRUE)
length_dim <- nrow(tum)
width_dim <- ncol(tum)
median_tum <- vector()
for (i in 1:length_dim)#Till the last gene entry
{
median_tum[i] <- median(as.matrix(tum[i,]))#loop is run only till the last patient entry
#if the covariates are not mentioned the loop is not functional after the 1st iteration
if(i%%5000==0){
print(i)
}
}
tum$median <- median_tum
tum <- subset(tum, tum$median >1)#filtering the ones with more than 1FPKM
tum$median = NULL
median_tum <- NULL
t_row <- rownames(tum)
t_col <- colnames(tum)
tum <- transpose(tum)
rownames(tum) <- t_col
colnames(tum) <- t_row
#tum <- as.data.frame(tum)
tum$ID <- rownames(tum)
tum$ID <- sub(".*(\\d+{4}).*$", "\\1", tum$ID)
#####initialising Sample Dataset#####
sample <- fread(clinical_file)
sample <- unique.data.frame(sample)
sample$ID <- sapply(strsplit(sample$submitter_id,split = "-"), "[",3)
sample$gender <- as.character(sample$gender)
sample[sample$gender=="female",]$gender <- "1"
sample[sample$gender=="male",]$gender <- "0"
sample$gender <- as.numeric(sample$gender)
sample <- sample[!is.na(sample$gender),]
##### Data Merging #####
data <- merge(sample, tum, by="ID", all = F)
data <- data.frame(data)
male_sub <- data[data$gender==0,]
female_sub <- data[data$gender==1,]
##### To Loop ###
for(plot_i in 1:length(genes)){
list_genes <- genes[plot_i]
print(list_genes)
############### Plot variables change genes #########
j = grep(list_genes[1],colnames(data))
male_sub[,j][male_sub[,j]< median(male_sub[,j])] <- 0
male_sub[,j][male_sub[,j]>= median(male_sub[,j])] <- 1
female_sub[,j][female_sub[,j]< median(female_sub[,j])] <- 0
female_sub[,j][female_sub[,j]>= median(female_sub[,j])] <- 1
fit_m <- survfit( Surv(time = PFI.time,
event = PFI)~ male_sub[,j],
data = male_sub)
fit_f <- survfit( Surv(time = PFI.time,
event = PFI)~ female_sub[,j],
data = female_sub)
tit_male <- str_c(args[1],"_Male_", idmap(colnames(male_sub)[j]))
tit_female <- str_c(args[1],"_Female_", idmap(colnames(female_sub)[j]))
tit_plot <- str_c(dir, args[1], colnames(data)[j],".png")
p1m <- ggsurvplot(fit_m, data=male_sub,palette = c("#404040", "#ca0020"),
ggtheme = theme_bw(),pval = TRUE,
pval.method=TRUE,conf.int = FALSE,
font.main=c(20,"bold"),font.x=c(16,"bold"),font.y=c(16,"bold"),
font.tickslab=c(14,"plain"), title = tit_male, legend.labs = c("Low", "High"))
p1f <- ggsurvplot(fit_f, data=female_sub,palette = c("#404040", "#ca0020"),
ggtheme = theme_bw(),pval = TRUE,
pval.method=TRUE,conf.int = FALSE,
font.main=c(20,"bold"),font.x=c(16,"bold"),font.y=c(16,"bold"),
font.tickslab=c(14,"plain"), title = tit_female, legend.labs = c("Low", "High"))
splots <- list()
splots[[1]] <- p1m
splots[[2]] <- p1f
p1 <- arrange_ggsurvplots(splots, print = FALSE,
ncol = 2, nrow = 1, title = str_c(args,"_",colnames(data)[j]))
png(tit_plot, width=800, height=400)
print(p1)
dev.off()
}
